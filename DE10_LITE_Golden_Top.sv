// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top (

    //////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
    input ADC_CLK_10,
`endif
    //////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
    input MAX10_CLK1_50,
`endif
    //////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
    input MAX10_CLK2_50,
`endif

    //////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
    output [12:0] DRAM_ADDR,
    output [ 1:0] DRAM_BA,
    output        DRAM_CAS_N,
    output        DRAM_CKE,
    output        DRAM_CLK,
    output        DRAM_CS_N,
    inout  [15:0] DRAM_DQ,
    output        DRAM_LDQM,
    output        DRAM_RAS_N,
    output        DRAM_UDQM,
    output        DRAM_WE_N,
`endif

    //////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
    output [7:0] HEX0,
`endif
`ifdef ENABLE_HEX1
    output [7:0] HEX1,
`endif
`ifdef ENABLE_HEX2
    output [7:0] HEX2,
`endif
`ifdef ENABLE_HEX3
    output [7:0] HEX3,
`endif
`ifdef ENABLE_HEX4
    output [7:0] HEX4,
`endif
`ifdef ENABLE_HEX5
    output [7:0] HEX5,
`endif

    //////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
    input [1:0] KEY,
`endif

    //////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
    output [9:0] LEDR,
`endif

    //////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
    input [9:0] SW,
`endif

    //////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
    output [3:0] VGA_B,
    output [3:0] VGA_G,
    output       VGA_HS,
    output [3:0] VGA_R,
    output       VGA_VS,
`endif

    //////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
    output       GSENSOR_CS_N,
    input  [2:1] GSENSOR_INT,
    output       GSENSOR_SCLK,
    inout        GSENSOR_SDI,
    inout        GSENSOR_SDO,
`endif

    //////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
    inout [15:0] ARDUINO_IO,
    inout        ARDUINO_RESET_N,
`endif

    //////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
    inout [35:0] GPIO
`endif
);



  //=======================================================
  //  REG/WIRE declarations
  //=======================================================

  logic [3:0] dig0 = 0;
  logic [3:0] dig1 = 0;
  logic [3:0] dig2 = 0;
  logic [3:0] dig3 = 0;
  logic [3:0] dig4 = 0;
  logic [3:0] dig5 = 0;



  sevenseg seg0 (
      dig0,
      HEX0
  );
  sevenseg seg1 (
      dig1,
      HEX1
  );
  sevenseg seg2 (
      dig2,
      HEX2
  );
  sevenseg seg3 (
      dig3,
      HEX3
  );
  sevenseg seg4 (
      dig4,
      HEX4
  );
  sevenseg seg5 (
      dig5,
      HEX5
  );

  integer ticks = 0;

  assign LEDR = SW;
  assign LED  = 1;

  always @(posedge MAX10_CLK1_50)
    if (ticks >= 5_000_000) // 50_000_000
		begin
      ticks = 0;
      dig0  = dig0 + 1;
      if (dig0 > 9) begin
        dig0 = 0;
        dig1 = dig1 + 1;
        if (dig1 > 5) begin
          dig1 = 0;
          dig2 = dig2 + 1;
        end
      end
    end else ticks = ticks + 1;


  //=======================================================
  //  Structural coding
  //=======================================================



endmodule




